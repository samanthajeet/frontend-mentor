{"version":3,"sources":["components/SignupForm/SignupForm.js","routes.js","components/Navigation/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["SignUpForm","state","first","last","email","password","prop","val","this","setState","Object","defineProperty","console","log","_this2","react_default","a","createElement","className","value","onChange","e","handleOnChange","target","type","placeholder","onClick","handleSubmit","Component","routes","react_router","path","exact","component","App","SignupForm","Nav","styled","nav","_templateObject","Navigation","props","history","location","pathname","goToPage","page","push","withRouter","Navigation_Navigation","match","Boolean","window","hostname","ReactDOM","render","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.246c2162.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./SignupForm.css\";\r\n\r\nclass SignUpForm extends Component {\r\n  state = {\r\n    first: '',\r\n    last: '',\r\n    email: '',\r\n    password: ''\r\n  };\r\n\r\n  handleOnChange(prop,val){\r\n    this.setState({ [prop] : val})\r\n  }\r\n\r\n  handleSubmit(){\r\n    for(let prop in this.state){\r\n      if(!this.state[prop]){\r\n        console.log(prop)\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main>\r\n        <section className=\"left\">\r\n          <h1>Learn to code by watching others</h1>\r\n          <h5>\r\n            See how experienced developers solve problems in real-time. Watching\r\n            scripted tutorials is great, but understanding how developers think\r\n            is invaluable.\r\n          </h5>\r\n        </section>\r\n        <section className=\"right\">\r\n          <section className=\"right-header rounded-corners\">\r\n            <h5>\r\n              <span className=\"bold\">Try it free 7 days</span> then $20/mo.\r\n              thereafter{\" \"}\r\n            </h5>\r\n          </section>\r\n          <section className=\"inputs rounded-corners\">\r\n            <input value={this.state.first} onChange={(e) => this.handleOnChange('first', e.target.value)} type=\"text\" placeholder=\"First Name\" />\r\n            <input onChange={(e) => this.handleOnChange('last', e.target.value)}  type=\"text\" placeholder=\"Last Name\" />\r\n            <input onChange={(e) => this.handleOnChange('email', e.target.value)}  type=\"text\" placeholder=\"Email Address\" />\r\n            <input onChange={(e) => this.handleOnChange('password', e.target.value)}  type=\"password\" placeholder=\"Password\" />\r\n            <button onClick={() => this.handleSubmit()} >Claim your free trial</button>\r\n            <section className=\"footer\">\r\n              By clicking the button, you are agreeing to our <span className=\"redtext\">Terms and Services</span> \r\n            </section>\r\n          </section>\r\n          <footer>\r\n            {/* <p className=\"attribution\">\r\n              Challenge by{\" \"}\r\n              <a\r\n                href=\"https://www.frontendmentor.io?ref=challenge\"\r\n                target=\"_blank\"\r\n              >\r\n                Frontend Mentor\r\n              </a>\r\n              . Coded by <a href=\"#\">Samantha Jeet</a>.\r\n            </p> */}\r\n          </footer>\r\n        </section>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignUpForm;\r\n","import React from 'react';\r\nimport {Switch, Route} from 'react-router-dom';\r\nimport App from './App'\r\nimport SignupForm from './components/SignupForm/SignupForm';\r\n\r\nexport default (\r\n  <Switch>\r\n    <Route path='/' exact component={App} />\r\n    <Route path='/signupform' component={SignupForm} />\r\n  </Switch>\r\n)","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Nav = styled.nav`\r\n\r\n  animation: fade-in 3s;\r\n  .home {\r\n    /* border: 1px solid red; */\r\n    position: relative;\r\n    top: 40vh;\r\n    left: 25%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 25%;\r\n    align-items: flex-start\r\n  }\r\n  .not-home{\r\n    /* border: 1px solid green; */\r\n    position: fixed;\r\n    bottom: 0;\r\n    width: 100%;\r\n    background: white;\r\n\r\n    button{\r\n      font-size: 1.5rem;\r\n    }\r\n  }\r\n\r\n  button{\r\n    background: none;\r\n    border: none;\r\n    margin: 0 1rem;\r\n    font-size: 2rem;\r\n    font-family: 'Nunito', sans-serif;\r\n    text-transform: lowercase;\r\n    color: #c7c7c7;\r\n    transition: color .75s ease-in-out;\r\n  }\r\n\r\n  button:hover{\r\n    cursor: pointer;\r\n    color: #801336;\r\n  }\r\n\r\n  button:active{\r\n    color: #EE4540;\r\n    transition: none;\r\n  }\r\n\r\n\r\n  @keyframes fade-in {\r\n  0%   { opacity: 0; }\r\n  100% { opacity: 1; }\r\n}\r\n`;\r\n\r\nfunction Navigation(props) {\r\n  console.log(props.history.location.pathname)\r\n  const location = function(){\r\n    if(props.history.location.pathname !== '/'){\r\n      return \"not-home\"\r\n    } else {\r\n      return 'home'\r\n    }\r\n  }\r\n\r\n  const goToPage = page => {\r\n    props.history.push(page);\r\n  };\r\n  return (\r\n    <Nav>\r\n      <section className={location()} >\r\n        <button onClick={() => goToPage(\"/\")}>Home</button>\r\n        <button onClick={() => goToPage(\"/signupform\")}>Signup Form</button>\r\n      </section>\r\n    </Nav>\r\n  );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from 'react';\nimport './App.css';\nimport routes from './routes'\nimport Navigation from './components/Navigation/Navigation'\nimport {withRouter} from 'react-router-dom'\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      {routes}\n      <Navigation history={props.history} match={props.match}/>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}